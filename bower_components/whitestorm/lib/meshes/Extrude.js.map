{"version":3,"sources":["meshes/Extrude.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AAEA;;AACA;;;;;;IAEM,O;;;AACJ,qBAAyB;AAAA,QAAb,MAAa,yDAAJ,EAAI;AAAA;;AAAA,yGACjB,MADiB,EACT,SADS;;AAGvB,qBAAO,OAAO,QAAd,EAAwB;AACtB,cAAQ,EADc;AAEtB,eAAS;AAFa,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAXsB;AAYxB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,0GAA+B,OAAO,QAAtC,CAAN;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,GAAiB,QAArC,EAA+C,OAAO,gBAAQ,QAAf,CAA/C,KACK,IAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,IAAb,KAAsB,SAA1C,EAAqD,OAAO,gBAAQ,WAAf,CAArD,KACA,IAAI,KAAK,OAAT,EAAkB,OAAO,gBAAQ,UAAf,CAAlB,KACA,OAAO,MAAM,IAAb;;AAEL,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,IAAJ,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,CAAf;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,aAAa,OAAO,MAAP,IAAiB,CAAC,OAAO,QAAzB,GAAoC,MAAM,qBAA1C,GAAkE,MAAM,eAA3F;;AAEA,aAAO,IAAI,UAAJ,CACL,OAAO,QAAP,CAAgB,MADX,EAEL,OAAO,QAAP,CAAgB,OAFX,CAAP;AAID;;;4BAkBO;AACN,aAAO,IAAI,OAAJ,CAAY,EAAC,OAAO,KAAR,EAAZ,EAA4B,IAA5B,CAAiC,IAAjC,CAAP;AACD;;;sBAlBY,G,EAAK;AAChB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,QAAQ,GAAT,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEc;AACb,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,MAAvC;AACD;;;sBAEa,G,EAAK;AACjB,WAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,aAAL,CAAmB,KAAK,YAAL,CAAkB,EAAC,UAAU,EAAC,SAAS,GAAV,EAAX,EAAlB,CAAnB,CAAvB;AACD,K;wBAEe;AACd,aAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,UAArB,CAAgC,OAAvC;AACD;;;;;QAQD,O,GAAA,O","file":"Extrude.js","sourcesContent":["import * as THREE from 'three';\r\nimport Physijs  from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend} from '../extras/api';\r\n\r\nclass Extrude extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'extrude');\r\n\r\n    extend(params.geometry, {\r\n      shapes: [],\r\n      options: {}\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = super._initMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = Physijs.SoftMesh;\r\n    else if (this.physics && this.physics.type === 'concave') Mesh = Physijs.ConcaveMesh;\r\n    else if (this.physics) Mesh = Physijs.ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.ExtrudeBufferGeometry : THREE.ExtrudeGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.shapes,\r\n      params.geometry.options\r\n    );\r\n  }\r\n\r\n  set G_shapes(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {shapes: val}}));\r\n  }\r\n\r\n  get G_shapes() {\r\n    return this.native.geometry.parameters.shapes;\r\n  }\r\n\r\n  set G_options(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {options: val}}));\r\n  }\r\n\r\n  get G_options() {\r\n    return this.native.geometry.parameters.options;\r\n  }\r\n\r\n  clone() {\r\n    return new Extrude({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Extrude\r\n};\r\n"]}