{"version":3,"sources":["meshes/Tube.js"],"names":[],"mappings":"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","file":"Tube.js","sourcesContent":["import * as THREE from 'three';\r\nimport Physijs  from '../physics/index.js';\r\n\r\nimport {Shape} from '../core/Shape';\r\nimport {extend} from '../extras/api';\r\n\r\nclass Tube extends Shape {\r\n  constructor(params = {}) {\r\n    super(params, 'tube');\r\n\r\n    extend(params.geometry, {\r\n      path: options.geometryOptions.path ? new this.CustomSinCurve(100) : false,\r\n      segments: 20,\r\n      radius: 2,\r\n      radiusSegments: 8,\r\n      closed: false\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = super._initMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics && this.getParams().softbody) Mesh = Physijs.SoftMesh;\r\n    else if (this.physics && this.physics.type === 'concave') Mesh = Physijs.ConcaveMesh;\r\n    else if (this.physics) Mesh = Physijs.ConvexMesh;\r\n    else Mesh = THREE.Mesh;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  get CustomSinCurve() {\r\n    return THREE.Curve.create(\r\n\r\n      (scale) => { // custom curve constructor\r\n        this.scale = scale || 1;\r\n      },\r\n\r\n      (t) => { // getPoint: t is between 0-1\r\n        const tx = t * 3 - 1.5,\r\n          ty = Math.sin(2 * Math.PI * t),\r\n          tz = 0;\r\n\r\n        return new THREE.Vector3(tx, ty, tz).multiplyScalar(this.scale);\r\n      }\r\n\r\n    );\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const GConstruct = params.buffer && !params.softbody ? THREE.TubeBufferGeometry : THREE.TubeGeometry;\r\n\r\n    return new GConstruct(\r\n      params.geometry.path,\r\n      params.geometry.segments,\r\n      params.geometry.radius,\r\n      params.geometry.radiusSegments,\r\n      params.geometry.closed\r\n    );\r\n  }\r\n\r\n  set G_path(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {path: val}}));\r\n  }\r\n\r\n  get G_path() {\r\n    return this.native.geometry.parameters.path;\r\n  }\r\n\r\n  set G_segments(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {segments: val}}));\r\n  }\r\n\r\n  get G_segments() {\r\n    return this.native.geometry.parameters.segments;\r\n  }\r\n\r\n  set G_radius(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radius: val}}));\r\n  }\r\n\r\n  get G_radius() {\r\n    return this.native.geometry.parameters.radius;\r\n  }\r\n\r\n  set G_radiusSegments(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {radiusSegments: val}}));\r\n  }\r\n\r\n  get G_radiusSegments() {\r\n    return this.native.geometry.parameters.radiusSegments;\r\n  }\r\n\r\n  set G_closed(val) {\r\n    this.native.geometry = this.buildGeometry(this.updateParams({geometry: {closed: val}}));\r\n  }\r\n\r\n  get G_closed() {\r\n    return this.native.geometry.parameters.closed;\r\n  }\r\n\r\n  clone() {\r\n    return new Tube({build: false}).copy(this);\r\n  }\r\n}\r\n\r\nexport {\r\n  Tube\r\n};\r\n"]}