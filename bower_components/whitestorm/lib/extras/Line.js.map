{"version":3,"sources":["extras/Line.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAAY,K;;AAEZ;;AACA;;AACA;;;;;;IAEM,I;;;AACJ,gBAAY,MAAZ,EAAoB;AAAA;;AAAA,sGACZ,MADY,EACJ,MADI;;AAGlB,qBAAO,OAAO,QAAd,EAAwB;AACtB,aAAO,KADe;AAEtB,cAAQ;AAFc,KAAxB;;AAKA,QAAI,OAAO,KAAX,EAAkB;AAChB,YAAK,KAAL,CAAW,MAAX;AACA;AACD;AAXiB;AAYnB;;;;4BAEkB;AAAA;;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACjB,UAAM,WAAW,uBAAa,OAAO,QAApB,CAAjB;;AAEA,UAAI,aAAJ;;AAEA,UAAI,KAAK,OAAT,EAAkB,uBAAlB,KACK,OAAO,MAAM,IAAb;;AAEL,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B,eAAK,SAAL,CAAe,IAAI,IAAJ,CACb,OAAK,aAAL,CAAmB,MAAnB,CADa,EAEb,QAFa,EAGb,OAAK,SAAL,EAHa,CAAf;;AAMA;AACD,OARM,CAAP;AASD;;;oCAE0B;AAAA,UAAb,MAAa,yDAAJ,EAAI;;AACzB,UAAM,WAAW,OAAO,MAAP,IAAiB,OAAO,OAAxB,GAAkC,IAAI,MAAM,cAAV,EAAlC,GAA+D,IAAI,MAAM,QAAV,EAAhF;;AAEA,UAAI,OAAO,MAAP,IAAiB,OAAO,OAA5B,EAAqC;AACnC,YAAM,KAAK,OAAO,QAAP,CAAgB,KAAhB,CAAsB,SAAtB,CAAgC,OAAO,QAAP,CAAgB,MAAhD,CAAX;AACA,YAAM,QAAQ,IAAI,YAAJ,CAAiB,GAAG,MAAH,GAAY,CAA7B,CAAd;;AAEA,aAAK,IAAI,IAAI,CAAR,EAAW,MAAM,GAAG,MAAzB,EAAiC,IAAI,GAArC,EAA0C,GAA1C,EAA+C;AAC7C,gBAAM,IAAI,CAAV,IAAe,GAAG,CAAH,EAAM,CAArB;AACA,gBAAM,IAAI,CAAJ,GAAQ,CAAd,IAAmB,GAAG,CAAH,EAAM,CAAzB;AACA,gBAAM,IAAI,CAAJ,GAAQ,CAAd,IAAmB,GAAG,CAAH,EAAM,CAAzB;AACD;;AAED,iBAAS,YAAT,CAAsB,UAAtB,EAAkC,IAAI,MAAM,eAAV,CAA0B,KAA1B,EAAiC,CAAjC,CAAlC;AACD,OAXD,MAWO,SAAS,QAAT,GAAoB,OAAO,QAAP,CAAgB,KAAhB,CAAsB,SAAtB,CAAgC,OAAO,QAAP,CAAgB,MAAhD,CAApB;;AAEP,UAAI,OAAO,QAAX,EAAqB,KAAK,wBAAL,CAA8B,QAA9B;;AAErB,aAAO,QAAP;AACD;;;;;QAID,I,GAAA,I","file":"Line.js","sourcesContent":["import * as THREE from 'three';\r\n\r\nimport {loadMaterial, extend} from './api';\r\nimport {RopeMesh} from '../physics/index.js';\r\nimport {Shape} from '../core/Shape';\r\n\r\nclass Line extends Shape {\r\n  constructor(params) {\r\n    super(params, 'line');\r\n\r\n    extend(params.geometry, {\r\n      curve: false,\r\n      points: 50\r\n    });\r\n\r\n    if (params.build) {\r\n      this.build(params);\r\n      super.wrap();\r\n    }\r\n  }\r\n\r\n  build(params = {}) {\r\n    const material = loadMaterial(params.material);\r\n\r\n    let Mesh;\r\n\r\n    if (this.physics) Mesh = RopeMesh;\r\n    else Mesh = THREE.Line;\r\n\r\n    return new Promise((resolve) => {\r\n      this.setNative(new Mesh(\r\n        this.buildGeometry(params),\r\n        material,\r\n        this.getParams()\r\n      ));\r\n\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  buildGeometry(params = {}) {\r\n    const geometry = params.buffer || params.physics ? new THREE.BufferGeometry() : new THREE.Geometry();\r\n\r\n    if (params.buffer || params.physics) {\r\n      const pp = params.geometry.curve.getPoints(params.geometry.points);\r\n      const verts = new Float32Array(pp.length * 3);\r\n\r\n      for (let i = 0, max = pp.length; i < max; i++) {\r\n        verts[i * 3] = pp[i].x;\r\n        verts[i * 3 + 1] = pp[i].y;\r\n        verts[i * 3 + 2] = pp[i].z;\r\n      }\r\n\r\n      geometry.addAttribute('position', new THREE.BufferAttribute(verts, 3));\r\n    } else geometry.vertices = params.geometry.curve.getPoints(params.geometry.points);\r\n\r\n    if (params.softbody) this.proccessSoftbodyGeometry(geometry);\r\n\r\n    return geometry;\r\n  }\r\n}\r\n\r\nexport {\r\n  Line\r\n};\r\n"]}